esphome:
  name: plantcontroller
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  ap:
    ssid: esp-captive
    password: !secret wifi_pass

wireguard:
  address: 10.8.0.108
  private_key: !secret wg_privkey
  peer_endpoint: !secret wg_peer
  peer_public_key: !secret wg_peer_pubkey

  netmask: 255.255.255.0

  # Optional endpoint port (WireGuard default if omitted)
  peer_port: 51820
  # Optional keepalive (disabled by default)
  peer_persistent_keepalive: 25s

time:
  - platform: sntp
    id: sntp_time
    timezone: 'Europe/Berlin'
# TLS doesn't work https://www.reddit.com/r/Esphome/comments/1b9v73k/esp8266_connect_to_mqtt_using_tls/
# mqtt:
#   broker: 209ef514eb85466e84a88ade4808203c.s1.eu.hivemq.cloud
#   port: 8883
#   username: !secret mqtt_user
#   password: !secret mqtt_pass
# Enable logging
logger:

# Enable Home Assistant API
#api:

ota:

# Enable I2C
i2c:
  sda: D2
  scl: D1
  scan: True

web_server:
  port: 80

sensor:
  # measure lux
  # - platform: bh1750
  #   name: "BH1750 Light Sensor"
  #   address: 0x23
  #   update_interval: 5s
  #   id: bh1750_sensor
  # measure soil moisture percentage
  - platform: adc
    pin: A0
    name: soil1
    id: soil1
    update_interval: 10s
    unit_of_measurement: "%"
    filters:
    - median:
        window_size: 7
        send_every: 4
        send_first_at: 1
    - calibrate_linear:
        - 0.85 -> 0.00
        - 0.44 -> 100.00
    - lambda: if (x < 1) return 0; else return (x);
    accuracy_decimals: 2
  # measure RH (+temp opt.)
  - platform: htu21d
    temperature:
      name: "Temperature"
      id: htu21d_temperature
    humidity:
      name: "Humidity"
      id: htu21d_humidity
    heater:
      name: "Heater"
    update_interval: 10s
  # measure leaf temp
  - platform: mlx90614
    ambient:
      name: "Ambient"
    object:
      name: "Object"
      id: mlx_object_temperature
    update_interval: 10s
output:
  - platform: esp8266_pwm
    pin:
      number: D8
      inverted: true
    id: gpio_pwm
    frequency: 1000 Hz

globals:
  - id: pwm_duty
    type: int
    restore_value: no
    initial_value: '0'
  - id: vpd
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: light_on
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: pump_duration_ms
    type: int
    restore_value: no
    initial_value: '60000'  # Default duration is 60 seconds (60 ml/min)
  - id: light_start_hour_value
    type: int
    restore_value: yes
    initial_value: '6'  # Default start at 6 AM
  - id: light_duration_value
    type: int
    restore_value: yes
    initial_value: '18'  # Default duration is 18 hours
light:
  - platform: monochromatic
    output: gpio_pwm
    restore_mode: RESTORE_DEFAULT_ON
    name: "PWM Light"
    id: pwm_light
# Enable HTTP requests
http_request:
  id: http_request_data
  useragent: esphome/anzuchtbox
  timeout: 2s
interval:
  - interval: 10s
    then:
      - lambda: |-
          float temperature = id(mlx_object_temperature).state;  // Using HTU21D temperature for VPD calculation
          float humidity = id(htu21d_humidity).state;
          float saturation_vapor_pressure = 0.61078 * exp((17.269 * temperature) / (237.3 + temperature));
          float actual_vapor_pressure = saturation_vapor_pressure * (humidity / 100.0);
          float vpd_value = (saturation_vapor_pressure - actual_vapor_pressure) * 1000; // Convert kPa to Pa
          id(vpd) = vpd_value;
          ESP_LOGD("custom", "Calculated VPD: %.2f Pa", vpd_value);
  # send metrics.
  # This is a relatively simple way to send out data directly from the ESP to Grafana Cloud.
  - interval: 10s
    then:
      - http_request.post:
          url: !secret monitoring_target
          verify_ssl: false
          headers:
            Authorization: !secret monitoring_token
            Content-Type: "text/plain"
          # This sends an InfluxDB line protocol message https://docs.influxdata.com/influxdb/cloud/reference/syntax/line-protocol/
          body: !lambda |-
            return (
              "temperature,sensor=htu21d value=" + to_string(id(htu21d_temperature).state) +
              "\n" +
              "humidity,sensor=htu21d value=" + to_string(id(htu21d_humidity).state) +
              "\n" +
              "object_temperature,sensor=mlx90614 value=" + to_string(id(mlx_object_temperature).state) +
              "\n" +
              "soil_moisture,sensor=soil12 value=" + to_string(id(soil1).state) +
              "\n" +
              "vpd,sensor=custom value=" + to_string(id(vpd))
            ).c_str();
          on_response:
            then:
              - logger.log:
                  format: "Got REST response: %s"
                  args: [ 'id(http_request_data).get_string()' ]
  - interval: 1min
    then:
      - lambda: |-
          auto time = id(sntp_time).now();
          int start_hour = id(light_start_hour_value);
          int end_hour = (start_hour + id(light_duration_value)) % 24;
          bool light_on = (time.hour >= start_hour && time.hour < end_hour) ||
                          (start_hour > end_hour && (time.hour >= start_hour || time.hour < end_hour));

          if (light_on) {
            id(pwm_light).turn_on().perform();
            ESP_LOGD("custom", "Light is ON (start hour: %d, duration: %d)", start_hour, id(light_duration_value));
          } else {
            id(pwm_light).turn_off().perform();
            ESP_LOGD("custom", "Light is OFF (start hour: %d, duration: %d)", start_hour, id(light_duration_value));
          }
#  - interval: 5min
#    then:
#      - lambda: |-
#          if (id(vpd) - 200 > id(target_vpd)) {
#            // VPD is too high, turn on humidifier and fan
#            id(sw_humidifier).turn_on();
#            id(sw_fan).turn_on();
#            id(vpd_control).turn_on(); // Activate timer for turning off
#          } else if (id(vpd) + 200 < id(target_vpd)) {
#            // VPD is too low, turn off humidifier and turn on fan
#            id(sw_humidifier).turn_off();
#            id(sw_fan).turn_on();
#            id(vpd_control).turn_on(); // Activate timer for turning off
#          }
switch:
  - platform: gpio
    pin: D0
    name: "Pump"
    inverted: true
    id: sw_pump
    on_turn_on:
      then:
        - script.execute: pump_control

  - platform: gpio
    pin: D5
    name: "Fan 1"
    inverted: true
    restore_mode: RESTORE_DEFAULT_ON
    id: sw_fan
  - platform: gpio
    pin: D7
    name: "Fan 2"
    inverted: true
    restore_mode: RESTORE_DEFAULT_ON
    id: switch4
  - platform: gpio
    pin: D6
    name: "Humidifier"
    inverted: true
    id: sw_humidifier
    restore_mode: RESTORE_DEFAULT_OFF
script:
  - id: pump_control
    then:
      - delay: !lambda "return id(pump_duration_ms);"
      - switch.turn_off: sw_pump
      - lambda: |-
          ESP_LOGD("custom", "Pump ran for %d ms", id(pump_duration_ms));

number:
  - platform: template
    name: "Pump Duration"
    id: pump_duration
    min_value: 60
    max_value: 2000
    step: 1
    unit_of_measurement: "ml"
    optimistic: true
    initial_value: 60
    set_action:
      - lambda: |-
          int duration_ms = (int(x) / 60.0) * 60000;
          id(pump_duration_ms) = duration_ms;
          ESP_LOGD("custom", "Pump duration set to: %d ms", duration_ms);
  # Slider for light start hour (24-hour format)
  - platform: template
    name: "Light Start Hour"
    id: light_start_hour
    min_value: 0
    max_value: 23
    step: 1
    unit_of_measurement: "h"
    optimistic: true
    initial_value: 6
    set_action:
      - lambda: |-
          id(light_start_hour_value) = (int)x;
          ESP_LOGD("custom", "Light start hour set to: %d", id(light_start_hour_value));
  # Slider for light duration in hours
  - platform: template
    name: "Light Duration"
    id: light_duration
    min_value: 1
    max_value: 24
    step: 1
    unit_of_measurement: "h"
    optimistic: true
    initial_value: 18
    set_action:
      - lambda: |-
          id(light_duration_value) = (int)x;
          ESP_LOGD("custom", "Light duration set to: %d", id(light_duration_value));