esphome:
  name: growsensor
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

# Enable I2C
i2c:
  sda: D2
  scl: D1
  scan: True
  id: bus_a

# Enable logging
logger:

# Enable Home Assistant API
#api:
#  password: "YourAPIPassword"

web_server:
  port: 80

ota:
  password: "asdf1234"
# Enable HTTP requests
http_request:
  id: http_request_data
  useragent: esphome/sensor_vpd_setup
  timeout: 10s
# Define global variable for storing VPD
globals:
  - id: vpd
    type: float
    restore_value: no
    initial_value: '0.0'
# Calculate VPD periodically
interval:
  - interval: 10s
    then:
      - lambda: |-
          float temperature = id(htu21d_temperature).state;  // Using HTU21D temperature for VPD calculation
          float humidity = id(htu21d_humidity).state;
          float saturation_vapor_pressure = 0.61078 * exp((17.269 * temperature) / (237.3 + temperature));
          float actual_vapor_pressure = saturation_vapor_pressure * (humidity / 100.0);
          float vpd_value = (saturation_vapor_pressure - actual_vapor_pressure) * 1000; // Convert kPa to Pa
          id(vpd) = vpd_value;
          ESP_LOGD("custom", "Calculated VPD: %.2f Pa", vpd_value);
  
  - interval: 10s
    then:
      - http_request.post:
          url: !secret monitoring_target
          verify_ssl: false
          headers:
            Authorization: !secret monitoring_token
            Content-Type: "text/plain"
          body: !lambda |-
            return (
              "temperature,sensor=htu21d value=" + to_string(id(htu21d_temperature).state) +
              "\n" +
              "humidity,sensor=htu21d value=" + to_string(id(htu21d_humidity).state) +
              "\n" +
              "ambient_temperature,sensor=mlx90614 value=" + to_string(id(mlx_object_temperature).state) +
              "\n" +
              "object_temperature,sensor=mlx90614 value=" + to_string(id(mlx_object_temperature).state) +
              "\n" +
              "vpd,sensor=custom value=" + to_string(id(vpd))
            ).c_str();
          on_response:
            then:
              - logger.log: 
                  format: "Got REST response: %s"
                  args : ['id(http_request_data).get_string()']
  
sensor:
  # - platform: adc
  #   pin: A0
  #   name: soil1
  #   update_interval: 10s
  #   unit_of_measurement: "%"
  #   filters:
  #   - median:
  #       window_size: 7
  #       send_every: 4
  #       send_first_at: 1
  #   - calibrate_linear:
  #       - 0.85 -> 0.00
  #       - 0.44 -> 100.00
  #   - lambda: if (x < 1) return 0; else return (x);
  #   accuracy_decimals: 0
  - platform: htu21d
    temperature:
      name: "Temperature"
      id: htu21d_temperature
    humidity:
      name: "Humidity"
      id: htu21d_humidity
    heater:
      name: "Heater"
    update_interval: 10s
# Configure the MLX90614 sensor
  - platform: mlx90614
    ambient:
      name: "Ambient"
    object:
      name: "Object"
      id: mlx_object_temperature
    update_interval: 10s

# Expose VPD as a separate sensor
  - platform: template
    name: "VaporPressureDeficit"
    unit_of_measurement: "Pa"
    accuracy_decimals: 2
    lambda: |-
      return id(vpd);
    update_interval: 10s