esphome:
  name: gimbal
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

time:
  - platform: sntp
    id: sntp_time
    timezone: 'Europe/Berlin'
wireguard:
  address: 10.8.0.111
  private_key: !secret wg_privkey_2
  peer_endpoint: !secret wg_peer
  peer_public_key: !secret wg_peer_pubkey

  netmask: 255.255.255.0

  # Optional endpoint port (WireGuard default if omitted)
  peer_port: 51820
  # Optional keepalive (disabled by default)
  peer_persistent_keepalive: 25s

# Enable logging
logger:

# Web server component
web_server:
  port: 80

ota:

output:
  - platform: esp8266_pwm
    id: servo_x
    pin: D4
    frequency: 50Hz
  - platform: esp8266_pwm
    id: servo_y
    pin: D3
    frequency: 50Hz

servo:
  - id: gimbal_servo_x
    output: servo_x 
    transition_length: 2s
    auto_detach_time: 4s
  - id: gimbal_servo_y
    output: servo_y
    transition_length: 2s
    auto_detach_time: 4s

fan:
  - platform: speed
    id: servo_control_x
    output: servo_x
    restore_mode: RESTORE_DEFAULT_OFF
    name: "X axis"
    on_speed_set:
      then:
        - lambda: |-
            // Convert fan speed (0-100%) to servo level (-1.0 to 1.0)
            float servo_level = (x * 2.0 / 100.0) - 1.0;
            id(gimbal_servo_x).write(servo_level);

  - platform: speed
    id: servo_control_y
    output: servo_y
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Y axis"
    on_speed_set:
      then:
        - lambda: |-
            // Convert fan speed (0-100%) to servo level (-1.0 to 1.0)
            float servo_level = (x * 2.0 / 100.0) - 1.0;
            id(gimbal_servo_y).write(servo_level);
